//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

import * as dayjs from 'dayjs';

export class PayTransferClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * Get DropDown PayTransferStatus
     * @return Success
     */
    getPayListStatus( cancelToken?: CancelToken | undefined): Promise<PayListStatusResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/PayListStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPayListStatus(_response);
        });
    }

    protected processGetPayListStatus(response: AxiosResponse): Promise<PayListStatusResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PayListStatusResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PayListStatusResponseDtoListServiceResponse>(null as any);
    }

    /**
     * Get DropDown PayTransferSourceType
     * @return Success
     */
    getPayListSourceType( cancelToken?: CancelToken | undefined): Promise<PayListSourceTypeResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/PayListSourceType";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPayListSourceType(_response);
        });
    }

    protected processGetPayListSourceType(response: AxiosResponse): Promise<PayListSourceTypeResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PayListSourceTypeResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PayListSourceTypeResponseDtoListServiceResponse>(null as any);
    }

    /**
     * Get GetPayListTransfer
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param payListStatusId (optional)
     * @param payListSourceTypeId (optional)
     * @param sendingBankCode (optional)
     * @param payListDetailCode (optional)
     * @param searchType (optional)
     * @param searchValues (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @return Success
     */
    getPayListTransfer(page?: number | undefined, recordsPerPage?: number | undefined, fromDate?: dayjs.Dayjs | undefined, toDate?: dayjs.Dayjs | undefined, payListStatusId?: number | undefined, payListSourceTypeId?: number | undefined, sendingBankCode?: string | undefined, payListDetailCode?: string | undefined, searchType?: number | undefined, searchValues?: string | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<PayListTransferResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/Filter?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (payListStatusId === null)
            throw new Error("The parameter 'payListStatusId' cannot be null.");
        else if (payListStatusId !== undefined)
            url_ += "PayListStatusId=" + encodeURIComponent("" + payListStatusId) + "&";
        if (payListSourceTypeId === null)
            throw new Error("The parameter 'payListSourceTypeId' cannot be null.");
        else if (payListSourceTypeId !== undefined)
            url_ += "PayListSourceTypeId=" + encodeURIComponent("" + payListSourceTypeId) + "&";
        if (sendingBankCode === null)
            throw new Error("The parameter 'sendingBankCode' cannot be null.");
        else if (sendingBankCode !== undefined)
            url_ += "SendingBankCode=" + encodeURIComponent("" + sendingBankCode) + "&";
        if (payListDetailCode === null)
            throw new Error("The parameter 'payListDetailCode' cannot be null.");
        else if (payListDetailCode !== undefined)
            url_ += "PayListDetailCode=" + encodeURIComponent("" + payListDetailCode) + "&";
        if (searchType === null)
            throw new Error("The parameter 'searchType' cannot be null.");
        else if (searchType !== undefined)
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (searchValues === null)
            throw new Error("The parameter 'searchValues' cannot be null.");
        else if (searchValues !== undefined)
            url_ += "SearchValues=" + encodeURIComponent("" + searchValues) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPayListTransfer(_response);
        });
    }

    protected processGetPayListTransfer(response: AxiosResponse): Promise<PayListTransferResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PayListTransferResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PayListTransferResponseDtoListServiceResponse>(null as any);
    }

    /**
     * Get PayListDetail
     * @param page (optional)
     * @param recordsPerPage (optional)
     * @param orderingField (optional)
     * @param ascendingOrder (optional)
     * @return Success
     */
    getPayListDetail(id: string, page?: number | undefined, recordsPerPage?: number | undefined, orderingField?: string | undefined, ascendingOrder?: boolean | undefined, cancelToken?: CancelToken | undefined): Promise<PayListDetailResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/PaylistDetail/{id}/filter?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordsPerPage === null)
            throw new Error("The parameter 'recordsPerPage' cannot be null.");
        else if (recordsPerPage !== undefined)
            url_ += "RecordsPerPage=" + encodeURIComponent("" + recordsPerPage) + "&";
        if (orderingField === null)
            throw new Error("The parameter 'orderingField' cannot be null.");
        else if (orderingField !== undefined)
            url_ += "OrderingField=" + encodeURIComponent("" + orderingField) + "&";
        if (ascendingOrder === null)
            throw new Error("The parameter 'ascendingOrder' cannot be null.");
        else if (ascendingOrder !== undefined)
            url_ += "AscendingOrder=" + encodeURIComponent("" + ascendingOrder) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPayListDetail(_response);
        });
    }

    protected processGetPayListDetail(response: AxiosResponse): Promise<PayListDetailResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PayListDetailResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PayListDetailResponseDtoListServiceResponse>(null as any);
    }

    /**
     * Get PayListHeader
     * @return Success
     */
    getPayListHeader(id: string, cancelToken?: CancelToken | undefined): Promise<PayListHeaderXBankResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/PayListHeader/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPayListHeader(_response);
        });
    }

    protected processGetPayListHeader(response: AxiosResponse): Promise<PayListHeaderXBankResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<PayListHeaderXBankResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<PayListHeaderXBankResponseDtoServiceResponse>(null as any);
    }

    /**
     * Get Bank
     * @param bankCode (optional)
     * @return Success
     */
    getBankList(bankCode?: string | undefined, cancelToken?: CancelToken | undefined): Promise<BankListResponseDtoListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/Bank?";
        if (bankCode === null)
            throw new Error("The parameter 'bankCode' cannot be null.");
        else if (bankCode !== undefined)
            url_ += "BankCode=" + encodeURIComponent("" + bankCode) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetBankList(_response);
        });
    }

    protected processGetBankList(response: AxiosResponse): Promise<BankListResponseDtoListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<BankListResponseDtoListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BankListResponseDtoListServiceResponse>(null as any);
    }

    /**
     * @param body (optional)
     * @return Success
     */
    inquiryTransectionBank(body?: InquiryTransectionBankRequestDto | undefined, cancelToken?: CancelToken | undefined): Promise<StringServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/inquirytransectionbank";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processInquiryTransectionBank(_response);
        });
    }

    protected processInquiryTransectionBank(response: AxiosResponse): Promise<StringServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<StringServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<StringServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    getTransactionHistory(paylistheaderid: string, cancelToken?: CancelToken | undefined): Promise<GetTransactionHistoryDtoResponseListServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/transactionhistory/{paylistheaderid}";
        if (paylistheaderid === undefined || paylistheaderid === null)
            throw new Error("The parameter 'paylistheaderid' must be defined.");
        url_ = url_.replace("{paylistheaderid}", encodeURIComponent("" + paylistheaderid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetTransactionHistory(_response);
        });
    }

    protected processGetTransactionHistory(response: AxiosResponse): Promise<GetTransactionHistoryDtoResponseListServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetTransactionHistoryDtoResponseListServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetTransactionHistoryDtoResponseListServiceResponse>(null as any);
    }

    /**
     * @return Success
     */
    getResultOfBankTranferInquiry(paylistheaderid: string, cancelToken?: CancelToken | undefined): Promise<GetResultOfBankTranferInquiryResponseDtoServiceResponse> {
        let url_ = this.baseUrl + "/PayTransfer/resultofbanktranferinquiry/{paylistheaderid}";
        if (paylistheaderid === undefined || paylistheaderid === null)
            throw new Error("The parameter 'paylistheaderid' must be defined.");
        url_ = url_.replace("{paylistheaderid}", encodeURIComponent("" + paylistheaderid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetResultOfBankTranferInquiry(_response);
        });
    }

    protected processGetResultOfBankTranferInquiry(response: AxiosResponse): Promise<GetResultOfBankTranferInquiryResponseDtoServiceResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = resultData200;
            return Promise.resolve<GetResultOfBankTranferInquiryResponseDtoServiceResponse>(result200);

        } else if (status === 401) {
            const _responseText = response.data;
            return throwException("Unauthorized", status, _responseText, _headers);

        } else if (status === 403) {
            const _responseText = response.data;
            return throwException("Forbidden", status, _responseText, _headers);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GetResultOfBankTranferInquiryResponseDtoServiceResponse>(null as any);
    }
}

export class ReportsClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param fromDate (optional)
     * @param toDate (optional)
     * @param payListStatusId (optional)
     * @param payListSourceTypeId (optional)
     * @param sendingBankCode (optional)
     * @param payListDetailCode (optional)
     * @param searchType (optional)
     * @param searchValues (optional)
     * @return Success
     */
    report(fromDate?: dayjs.Dayjs | undefined, toDate?: dayjs.Dayjs | undefined, payListStatusId?: number | undefined, payListSourceTypeId?: number | undefined, sendingBankCode?: string | undefined, payListDetailCode?: string | undefined, searchType?: number | undefined, searchValues?: string | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/Reports/Report?";
        if (fromDate === null)
            throw new Error("The parameter 'fromDate' cannot be null.");
        else if (fromDate !== undefined)
            url_ += "FromDate=" + encodeURIComponent(fromDate ? "" + fromDate.toISOString() : "") + "&";
        if (toDate === null)
            throw new Error("The parameter 'toDate' cannot be null.");
        else if (toDate !== undefined)
            url_ += "ToDate=" + encodeURIComponent(toDate ? "" + toDate.toISOString() : "") + "&";
        if (payListStatusId === null)
            throw new Error("The parameter 'payListStatusId' cannot be null.");
        else if (payListStatusId !== undefined)
            url_ += "PayListStatusId=" + encodeURIComponent("" + payListStatusId) + "&";
        if (payListSourceTypeId === null)
            throw new Error("The parameter 'payListSourceTypeId' cannot be null.");
        else if (payListSourceTypeId !== undefined)
            url_ += "PayListSourceTypeId=" + encodeURIComponent("" + payListSourceTypeId) + "&";
        if (sendingBankCode === null)
            throw new Error("The parameter 'sendingBankCode' cannot be null.");
        else if (sendingBankCode !== undefined)
            url_ += "SendingBankCode=" + encodeURIComponent("" + sendingBankCode) + "&";
        if (payListDetailCode === null)
            throw new Error("The parameter 'payListDetailCode' cannot be null.");
        else if (payListDetailCode !== undefined)
            url_ += "PayListDetailCode=" + encodeURIComponent("" + payListDetailCode) + "&";
        if (searchType === null)
            throw new Error("The parameter 'searchType' cannot be null.");
        else if (searchType !== undefined)
            url_ += "SearchType=" + encodeURIComponent("" + searchType) + "&";
        if (searchValues === null)
            throw new Error("The parameter 'searchValues' cannot be null.");
        else if (searchValues !== undefined)
            url_ += "SearchValues=" + encodeURIComponent("" + searchValues) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processReport(_response);
        });
    }

    protected processReport(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export class TestPayTranferConsumerClient {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";

    }

    /**
     * @param body (optional)
     * @return Success
     */
    testtempmoneytransfercreateconsumer(body?: TestTempPayListCreateDto | undefined, cancelToken?: CancelToken | undefined): Promise<void> {
        let url_ = this.baseUrl + "/TestPayTranferConsumer/testtempmoneytransfercreateconsumer";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json-patch+json",
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processTesttempmoneytransfercreateconsumer(_response);
        });
    }

    protected processTesttempmoneytransfercreateconsumer(response: AxiosResponse): Promise<void> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            // const _responseText = response.data;
            return Promise.resolve<void>(null as any);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface BankListResponseDto {
    bankId?: number;
    bankName?: string | undefined;
    bankCode?: string | undefined;
}

export interface BankListResponseDtoListServiceResponse {
    data?: BankListResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetResultOfBankTranferInquiryResponseDto {
    message?: string | undefined;
}

export interface GetResultOfBankTranferInquiryResponseDtoServiceResponse {
    data?: GetResultOfBankTranferInquiryResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface GetTransactionHistoryDtoResponse {
    detail?: string | undefined;
    createdDate?: dayjs.Dayjs | undefined;
    createdByUser?: string | undefined;
}

export interface GetTransactionHistoryDtoResponseListServiceResponse {
    data?: GetTransactionHistoryDtoResponse[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface InquiryTransectionBankRequestDto {
    refCode: string;
}

export interface PayListDetailResponseDto {
    payListDetailId?: string;
    payListDetailCode?: string | undefined;
    refDetail01?: string | undefined;
    refDetail02?: string | undefined;
    amount?: number;
    refDate?: dayjs.Dayjs;
}

export interface PayListDetailResponseDtoListServiceResponse {
    data?: PayListDetailResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PayListHeaderResponseDto {
    payListHeaderId?: string;
    payListHeaderCode?: string | undefined;
    sendingBankId?: number | undefined;
    sendingBankAccountNo?: string | undefined;
    sendingName?: string | undefined;
    receivingBankId?: number | undefined;
    receivingBankAccountNo?: string | undefined;
    receivingBankName?: string | undefined;
    payListStatusId?: number | undefined;
    amount?: number | undefined;
    isTransfer?: boolean | undefined;
    payListHeaderSourceTypeId?: number | undefined;
    isSentSMS?: boolean | undefined;
    phoneNo?: string | undefined;
}

export interface PayListHeaderXBankResponseDto {
    payListHeaderId?: string;
    payListHeaderCode?: string | undefined;
    sendingBankId?: number | undefined;
    sendingBankAccountNo?: string | undefined;
    sendingBankName?: string | undefined;
    sendingName?: string | undefined;
    receivingBankId?: number | undefined;
    receivingBankAccountNo?: string | undefined;
    receivingBankName?: string | undefined;
    receivingName?: string | undefined;
    bankTranferNo?: string | undefined;
    bankStatusCode?: string | undefined;
    bankDescription?: string | undefined;
    payListStatusId?: number | undefined;
    payListStatusName?: string | undefined;
    amount?: number | undefined;
    isTransfer?: boolean | undefined;
    payListHeaderSourceTypeId?: number | undefined;
    payListHeaderSourceTypeName?: string | undefined;
    isSentSMS?: boolean | undefined;
    phoneNo?: string | undefined;
    ref1?: string | undefined;
    bankTransferDate?: dayjs.Dayjs | undefined;
    bankDescriptionTh?: string | undefined;
    payResultStatusId?: number | undefined;
    payResultDescription?: string | undefined;
}

export interface PayListHeaderXBankResponseDtoServiceResponse {
    data?: PayListHeaderXBankResponseDto;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PayListSourceTypeResponseDto {
    payListSourceTypeId?: number;
    payListSourceTypeName?: string | undefined;
}

export interface PayListSourceTypeResponseDtoListServiceResponse {
    data?: PayListSourceTypeResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PayListStatusResponseDto {
    payListStatusId?: number;
    payListStatusName?: string | undefined;
}

export interface PayListStatusResponseDtoListServiceResponse {
    data?: PayListStatusResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface PayListTransferResponseDto {
    refCode?: string;
    sendingBankCode?: string | undefined;
    sendingBankAccountNo?: string | undefined;
    sendingName?: string | undefined;
    receivingBankCode?: string | undefined;
    receivingBankAccountNo?: string | undefined;
    receivingName?: string | undefined;
    amount?: number;
    refCodeNavigation?: PayListHeaderResponseDto;
    payListSourceType?: PayListSourceTypeResponseDto;
    payListStatus?: PayListStatusResponseDto;
    ref1?: string | undefined;
    ref2?: string | undefined;
    paylistSourceTypeId?: number;
    isSentSMS?: boolean;
    phoneNo?: string | undefined;
    payListStatusId?: number;
    bankTransferDate?: dayjs.Dayjs | undefined;
    bankTransCode?: string | undefined;
    bankStatusCode?: string | undefined;
    bankDescription?: string | undefined;
    isStatementId?: boolean | undefined;
    bankDescriptionTh?: string | undefined;
    payResultStatusId?: number | undefined;
    payResultDescription?: string | undefined;
}

export interface PayListTransferResponseDtoListServiceResponse {
    data?: PayListTransferResponseDto[] | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface StringServiceResponse {
    data?: string | undefined;
    isSuccess?: boolean;
    message?: string | undefined;
    code?: number | undefined;
    exceptionMessage?: any | undefined;
    serverDateTime?: dayjs.Dayjs;
    totalAmountRecords?: number | undefined;
    totalAmountPages?: number | undefined;
    currentPage?: number | undefined;
    recordsPerPage?: number | undefined;
    pageIndex?: number | undefined;
}

export interface TestTempPayListCreateDto {
    sendingBankId?: number | undefined;
    sendingBankAccountNo?: string | undefined;
    sendingName?: string | undefined;
    receivingBankId?: number | undefined;
    receivingBankAccountNo?: string | undefined;
    receivingName?: string | undefined;
    amount?: number | undefined;
    detailCreates?: TestTempPayListDetailCreate[] | undefined;
}

export interface TestTempPayListDetailCreate {
    amount?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}